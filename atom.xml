<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.co の博客</title>
  
  <subtitle>记录学习的技能和遇到的问题</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cocoblog.site/"/>
  <updated>2017-10-12T03:34:57.000Z</updated>
  <id>http://cocoblog.site/</id>
  
  <author>
    <name>Mr.co</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tableView setion  cell加边框圆角</title>
    <link href="http://cocoblog.site/tableView-setion-cell%E5%8A%A0%E8%BE%B9%E6%A1%86%E5%9C%86%E8%A7%92.html"/>
    <id>http://cocoblog.site/tableView-setion-cell加边框圆角.html</id>
    <published>2017-10-12T03:23:14.000Z</published>
    <updated>2017-10-12T03:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>###最近项目UI需求tableViewCell 带圆角边框，自己写了下像平常那样去设置圆角边框行不通网上差了一下自己又改进一下，废话不多说先看图在撸代码。<br>图片效果如下：<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/2042941-f77ffeb618445f20.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="51499150024_.pic副本.jpg"></p><hr><p>###实现上面效果暂时想到两种办法：</p><p>####一、cell重绘给section，绘制边框。可以构建基类或者写在category里面，方便使用代码如下：<br>可直接复制代码到项目中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath &#123;</div><div class="line">// 这里要判断分组列表中的第一行，每组section的第一行，每组section的中间行</div><div class="line"></div><div class="line">// CGPathAddRoundedRect(pathRef, nil, bounds, cornerRadius, cornerRadius);</div><div class="line">if (indexPath.section == 2) &#123;</div><div class="line">// 圆角弧度半径</div><div class="line">CGFloat cornerRadius = 3.f;</div><div class="line">// 设置cell的背景色为透明，如果不设置这个的话，则原来的背景色不会被覆盖</div><div class="line">cell.backgroundColor = UIColor.clearColor;</div><div class="line"></div><div class="line">// 创建一个shapeLayer</div><div class="line">CAShapeLayer *layer = [[CAShapeLayer alloc] init];</div><div class="line">CAShapeLayer *backgroundLayer = [[CAShapeLayer alloc] init]; //显示选中</div><div class="line">// 创建一个可变的图像Path句柄，该路径用于保存绘图信息</div><div class="line">CGMutablePathRef pathRef = CGPathCreateMutable();</div><div class="line">// 获取cell的size</div><div class="line">// 第一个参数,是整个 cell 的 bounds, 第二个参数是距左右两端的距离,第三个参数是距上下两端的距离</div><div class="line">CGRect bounds = CGRectInset(cell.bounds, 10, 0);</div><div class="line"></div><div class="line">// CGRectGetMinY：返回对象顶点坐标</div><div class="line">// CGRectGetMaxY：返回对象底点坐标</div><div class="line">// CGRectGetMinX：返回对象左边缘坐标</div><div class="line">// CGRectGetMaxX：返回对象右边缘坐标</div><div class="line">// CGRectGetMidX: 返回对象中心点的X坐标</div><div class="line">// CGRectGetMidY: 返回对象中心点的Y坐标</div><div class="line">if (indexPath.row == 0 &amp;&amp; indexPath.row == [tableView numberOfRowsInSection:indexPath.section]-1) &#123;</div><div class="line">CGPathAddRoundedRect(pathRef, nil, bounds, cornerRadius, cornerRadius);</div><div class="line">&#125;else if (indexPath.row == 0) &#123;</div><div class="line">// 初始起点为cell的左下角坐标</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMaxY(bounds));</div><div class="line">// 起始坐标为左下角，设为p，（CGRectGetMinX(bounds), CGRectGetMinY(bounds)）为左上角的点，设为p1(x1,y1)，(CGRectGetMidX(bounds), CGRectGetMinY(bounds))为顶部中点的点，设为p2(x2,y2)。然后连接p1和p2为一条直线l1，连接初始点p到p1成一条直线l，则在两条直线相交处绘制弧度为r的圆角。</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMinY(bounds), CGRectGetMidX(bounds), CGRectGetMinY(bounds), cornerRadius);</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMinY(bounds), CGRectGetMaxX(bounds), CGRectGetMidY(bounds), cornerRadius);</div><div class="line"></div><div class="line">// 终点坐标为右下角坐标点，把绘图信息都放到路径中去,根据这些路径就构成了一块区域了</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMaxY(bounds));</div><div class="line">//            CGPathCloseSubpath(pathRef);</div><div class="line"></div><div class="line">&#125; else if (indexPath.row == [tableView numberOfRowsInSection:indexPath.section]-1) &#123;</div><div class="line">//</div><div class="line">// 初始起点为cell的左上角坐标</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMinY(bounds));</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMaxY(bounds), CGRectGetMidX(bounds), CGRectGetMaxY(bounds), cornerRadius);</div><div class="line">CGPathAddArcToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMaxY(bounds), CGRectGetMaxX(bounds), CGRectGetMidY(bounds), cornerRadius);</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMinY(bounds));</div><div class="line">//            CGPathCloseSubpath(pathRef);</div><div class="line"></div><div class="line"></div><div class="line">&#125; else &#123;</div><div class="line">// 添加cell的rectangle信息到path中（不包括圆角）</div><div class="line">//            CGPathAddRect(pathRef, nil, bounds);</div><div class="line"></div><div class="line">//假如只要边框</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMaxY(bounds));</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMinX(bounds), CGRectGetMinY(bounds));</div><div class="line">CGPathMoveToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMinY(bounds));</div><div class="line">CGPathAddLineToPoint(pathRef, nil, CGRectGetMaxX(bounds), CGRectGetMaxY(bounds));</div><div class="line">&#125;</div><div class="line">// 把已经绘制好的可变图像路径赋值给图层，然后图层根据这图像path进行图像渲染render</div><div class="line">layer.path = pathRef;</div><div class="line">backgroundLayer.path = pathRef;</div><div class="line"></div><div class="line">// 注意：但凡通过Quartz2D中带有creat/copy/retain方法创建出来的值都必须要释放</div><div class="line">CFRelease(pathRef);</div><div class="line">// 按照shape layer的path填充颜色，类似于渲染render</div><div class="line">layer.lineWidth = 0.5f;//线的宽度</div><div class="line">layer.strokeColor = [UIColor colorWithHex:@&quot;#cccccc&quot;].CGColor;//线的颜色</div><div class="line">layer.fillColor = [UIColor whiteColor].CGColor;//cellcell背景色</div><div class="line">// view大小与cell一致</div><div class="line">UIView *roundView = [[UIView alloc] initWithFrame:bounds];</div><div class="line">// 添加自定义圆角后的图层到roundView中</div><div class="line">[roundView.layer insertSublayer:layer atIndex:0];</div><div class="line">roundView.backgroundColor = UIColor.clearColor;</div><div class="line">// cell的背景view</div><div class="line">cell.backgroundView = roundView;</div><div class="line">cell.backgroundColor = [UIColor whiteColor];</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><p></p><p></p><p>####二、自定义一个BaseCell作为基类，由它承载边框的实现；然后再继承于BaseBorderCell自定义cell进行内容展示；</p><p><hr><ul><li>BaseBorderCell.h文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">//此cell只简单负责border的配置，cell中的内容可以继承于此类再进行封装</div><div class="line"></div><div class="line">typedef NS_ENUM(NSUInteger, BaseCellBorderStyle) &#123;</div><div class="line">BaseCellBorderStyleNoRound = 0,</div><div class="line">BaseCellBorderStyleTopRound,</div><div class="line">BaseCellBorderStyleBottomRound,</div><div class="line">BaseCellBorderStyleAllRound,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface BaseBorderCell : UITableViewCell</div><div class="line"></div><div class="line">@property (nonatomic, assign) BaseCellBorderStyle borderStyle;//边框类型</div><div class="line">@property (nonatomic, strong) UIColor *contentBorderColor;//边框颜色</div><div class="line">@property (nonatomic, strong) UIColor *contentBackgroundColor;//边框内部内容颜色</div><div class="line">@property (nonatomic, assign) CGFloat contentBorderWidth;//边框的宽度，这个宽度的一半会延伸到外部，如果对宽度比较敏感的要注意下</div><div class="line">@property (nonatomic, assign) CGFloat contentMargin;//左右距离父视图的边距</div><div class="line">@property (nonatomic, assign) CGSize contentCornerRadius;//边框的圆角</div><div class="line"></div><div class="line">+ (instancetype)cellWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath;</div><div class="line">//如果不想用上面的方法初始化cell，就用下面的方法设置borderStyle</div><div class="line">- (void)setBorderStyleWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath;</div><div class="line">@end</div></pre></td></tr></table></figure><ul><li>BaseBorderCell.m文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line">#import &quot;BaseBorderCell.h&quot;</div><div class="line"></div><div class="line">#define Width self.contentView.frame.size.width</div><div class="line">#define Height self.contentView.frame.size.height</div><div class="line"></div><div class="line">@implementation BaseBorderCell</div><div class="line">//</div><div class="line">+ (instancetype)cellWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">BaseBorderCell *cell = [tableView dequeueReusableCellWithIdentifier:@&quot;cell&quot;];</div><div class="line">if (!cell) &#123;</div><div class="line">cell = [[BaseBorderCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@&quot;cell&quot;];</div><div class="line">&#125;</div><div class="line">//一定要这里设置style，而不能在上面的判断里面，因为cell重用的时候，只要有不同的地方都应该重新设置，否则拿到cell的style就是上一个的样式而自己却没有进行修改</div><div class="line">if (indexPath.row == 0 &amp;&amp; indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleAllRound;</div><div class="line">&#125;else if (indexPath.row == 0) &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleTopRound;</div><div class="line">&#125;else if (indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleBottomRound;</div><div class="line">&#125;else &#123;</div><div class="line">cell.borderStyle = BaseCellBorderStyleNoRound;</div><div class="line">&#125;</div><div class="line">return cell;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier</div><div class="line">&#123;</div><div class="line">self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];</div><div class="line">if (self) &#123;</div><div class="line">//配置默认值</div><div class="line">self.contentBorderColor = [UIColor lightGrayColor];</div><div class="line">self.contentBackgroundColor = [UIColor whiteColor];</div><div class="line">self.contentBorderWidth = 2.0;</div><div class="line">self.contentMargin = 10.0;</div><div class="line">self.contentCornerRadius = CGSizeMake(5, 5);</div><div class="line">&#125;</div><div class="line">return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setBorderStyleWithTableView:(UITableView *)tableView indexPath:(NSIndexPath *)indexPath</div><div class="line">&#123;</div><div class="line">if (indexPath.row == 0 &amp;&amp; indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleAllRound;</div><div class="line">&#125;else if (indexPath.row == 0) &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleTopRound;</div><div class="line">&#125;else if (indexPath.row == [tableView numberOfRowsInSection:indexPath.section] - 1) &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleBottomRound;</div><div class="line">&#125;else &#123;</div><div class="line">self.borderStyle = BaseCellBorderStyleNoRound;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)layoutSubviews</div><div class="line">&#123;</div><div class="line">[super layoutSubviews];</div><div class="line">//在这里设置才能获取到真正显示时候的宽度，而不是原始的</div><div class="line">[self setupBorder];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)setupBorder</div><div class="line">&#123;</div><div class="line">self.selectionStyle = UITableViewCellSelectionStyleNone;</div><div class="line">self.backgroundColor = [UIColor clearColor];</div><div class="line"></div><div class="line">CAShapeLayer *layer = [CAShapeLayer layer];</div><div class="line">layer.lineWidth = self.contentBorderWidth;</div><div class="line">layer.strokeColor = self.contentBorderColor.CGColor;</div><div class="line">layer.fillColor =  self.contentBackgroundColor.CGColor;</div><div class="line"></div><div class="line">UIView *view = [[UIView alloc] initWithFrame:self.contentView.bounds];</div><div class="line">[view.layer insertSublayer:layer atIndex:0];</div><div class="line">view.backgroundColor = [UIColor clearColor];</div><div class="line">//用自定义的view代替cell的backgroundView</div><div class="line">self.backgroundView = view;</div><div class="line"></div><div class="line">CGRect rect = CGRectMake(self.contentMargin, 0, Width - 2*self.contentMargin, Height);</div><div class="line">switch (self.borderStyle) &#123;</div><div class="line">case BaseCellBorderStyleNoRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRect:rect];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">case BaseCellBorderStyleTopRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerTopLeft | UIRectCornerTopRight cornerRadii:self.contentCornerRadius];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">case BaseCellBorderStyleBottomRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerBottomLeft | UIRectCornerBottomRight cornerRadii:self.contentCornerRadius];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">case BaseCellBorderStyleAllRound:</div><div class="line">&#123;</div><div class="line">UIBezierPath *path = [UIBezierPath bezierPathWithRoundedRect:rect byRoundingCorners:UIRectCornerAllCorners cornerRadii:self.contentCornerRadius];</div><div class="line">layer.path = path.CGPath;</div><div class="line">&#125;</div><div class="line">break;</div><div class="line">default:</div><div class="line">break;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></p><p>###个人喜欢第一种简单高效副作用小</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###最近项目UI需求tableViewCell 带圆角边框，自己写了下像平常那样去设置圆角边框行不通网上差了一下自己又改进一下，废话不多说先看图在撸代码。&lt;br&gt;图片效果如下：&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS自动查找项目中不用的图片资源 </title>
    <link href="http://cocoblog.site/iOS%E8%87%AA%E5%8A%A8%E6%9F%A5%E6%89%BE%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%B8%8D%E7%94%A8%E7%9A%84%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90.html"/>
    <id>http://cocoblog.site/iOS自动查找项目中不用的图片资源.html</id>
    <published>2017-10-12T03:15:01.000Z</published>
    <updated>2017-10-12T03:34:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>###项目上线资源包比较大，要做瘦身，首先想到是删除项目中不用的图片资源，去github上搜索了比较好用的项目资源，比较好用分享给大家，简单好用<br><a id="more"></a></p><p>####1.去github上下载<a href="https://github.com/Cocowyr/LSUnusedResources" target="_blank" rel="external">LSUnusedResources</a></p><p>####2.运行LSUnusedResources项目，运行结果如下</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-024524d56cbe274f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####3.点击dock中的项目图标</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-68acdf6c1bfb85b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####4.上传项目路径</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-689f529d3fb55742.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####5.点击search</p><p><img src="http://upload-images.jianshu.io/upload_images/2042941-0e9ad76c59a3e87d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>####6.delete掉没有用的资源图片</p><p>###注意：删除的时候要谨慎！别什么图都删了，看看对项目有没有作用。这个插件有时也会有一定的误差。但总体来说非常好用。</p><p>###</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###项目上线资源包比较大，要做瘦身，首先想到是删除项目中不用的图片资源，去github上搜索了比较好用的项目资源，比较好用分享给大家，简单好用&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://cocoblog.site/categories/iOS/"/>
    
    
      <category term="iOS优化" scheme="http://cocoblog.site/tags/iOS%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cocoblog.site/hello-world.html"/>
    <id>http://cocoblog.site/hello-world.html</id>
    <published>2017-10-11T06:55:02.000Z</published>
    <updated>2017-10-11T06:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
